//
//  tokenizer+namedcharacter.swift
//  html5tokenizer
//
//  Created by Johannes Schriewer on 17/11/15.
//  Copyright © 2015 anfema. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted under the conditions of the 3-clause
// BSD license (see LICENSE.txt for full license text)

import Foundation

extension HTML5Tokenizer {
    func parse(namedChar characterName: String) -> UnicodeScalar {
        switch characterName {
        case "Aacute":
            return "Á"
        case "aacute":
            return "á"
        case "Abreve":
            return "Ă"
        case "abreve":
            return "ă"
        case "ac":
            return "∾"
        case "acd":
            return "∿"
        case "Acirc":
            return "Â"
        case "acirc":
            return "â"
        case "acute":
            return "´"
        case "Acy":
            return "А"
        case "acy":
            return "а"
        case "AElig":
            return "Æ"
        case "aelig":
            return "æ"
        case "af":
            return "⁡"
        case "Afr":
            return "프"
        case "afr":
            return "픞"
        case "Agrave":
            return "À"
        case "agrave":
            return "à"
        case "alefsym":
            return "ℵ"
        case "aleph":
            return "ℵ"
        case "Alpha":
            return "Α"
        case "alpha":
            return "α"
        case "Amacr":
            return "Ā"
        case "amacr":
            return "ā"
        case "amalg":
            return "⨿"
        case "AMP":
            return "&"
        case "amp":
            return "&"
        case "And":
            return "⩓"
        case "and":
            return "∧"
        case "andand":
            return "⩕"
        case "andd":
            return "⩜"
        case "andslope":
            return "⩘"
        case "andv":
            return "⩚"
        case "ang":
            return "∠"
        case "ange":
            return "⦤"
        case "angle":
            return "∠"
        case "angmsd":
            return "∡"
        case "angmsdaa":
            return "⦨"
        case "angmsdab":
            return "⦩"
        case "angmsdac":
            return "⦪"
        case "angmsdad":
            return "⦫"
        case "angmsdae":
            return "⦬"
        case "angmsdaf":
            return "⦭"
        case "angmsdag":
            return "⦮"
        case "angmsdah":
            return "⦯"
        case "angrt":
            return "∟"
        case "angrtvb":
            return "⊾"
        case "angrtvbd":
            return "⦝"
        case "angsph":
            return "∢"
        case "angst":
            return "Å"
        case "angzarr":
            return "⍼"
        case "Aogon":
            return "Ą"
        case "aogon":
            return "ą"
        case "Aopf":
            return "픸"
        case "aopf":
            return "핒"
        case "ap":
            return "≈"
        case "apacir":
            return "⩯"
        case "apE":
            return "⩰"
        case "ape":
            return "≊"
        case "apid":
            return "≋"
        case "apos":
            return "'"
        case "ApplyFunction":
            return "⁡"
        case "approx":
            return "≈"
        case "approxeq":
            return "≊"
        case "Aring":
            return "Å"
        case "aring":
            return "å"
        case "Ascr":
            return "풜"
        case "ascr":
            return "풶"
        case "Assign":
            return "≔"
        case "ast":
            return "*"
        case "asymp":
            return "≈"
        case "asympeq":
            return "≍"
        case "Atilde":
            return "Ã"
        case "atilde":
            return "ã"
        case "Auml":
            return "Ä"
        case "auml":
            return "ä"
        case "awconint":
            return "∳"
        case "awint":
            return "⨑"
        case "backcong":
            return "≌"
        case "backepsilon":
            return "϶"
        case "backprime":
            return "‵"
        case "backsim":
            return "∽"
        case "backsimeq":
            return "⋍"
        case "Backslash":
            return "∖"
        case "Barv":
            return "⫧"
        case "barvee":
            return "⊽"
        case "Barwed":
            return "⌆"
        case "barwed":
            return "⌅"
        case "barwedge":
            return "⌅"
        case "bbrk":
            return "⎵"
        case "bbrktbrk":
            return "⎶"
        case "bcong":
            return "≌"
        case "Bcy":
            return "Б"
        case "bcy":
            return "б"
        case "bdquo":
            return "„"
        case "becaus":
            return "∵"
        case "Because":
            return "∵"
        case "because":
            return "∵"
        case "bemptyv":
            return "⦰"
        case "bepsi":
            return "϶"
        case "bernou":
            return "ℬ"
        case "Bernoullis":
            return "ℬ"
        case "Beta":
            return "Β"
        case "beta":
            return "β"
        case "beth":
            return "ℶ"
        case "between":
            return "≬"
        case "Bfr":
            return "픅"
        case "bfr":
            return "픟"
        case "bigcap":
            return "⋂"
        case "bigcirc":
            return "◯"
        case "bigcup":
            return "⋃"
        case "bigodot":
            return "⨀"
        case "bigoplus":
            return "⨁"
        case "bigotimes":
            return "⨂"
        case "bigsqcup":
            return "⨆"
        case "bigstar":
            return "★"
        case "bigtriangledown":
            return "▽"
        case "bigtriangleup":
            return "△"
        case "biguplus":
            return "⨄"
        case "bigvee":
            return "⋁"
        case "bigwedge":
            return "⋀"
        case "bkarow":
            return "⤍"
        case "blacklozenge":
            return "⧫"
        case "blacksquare":
            return "▪"
        case "blacktriangle":
            return "▴"
        case "blacktriangledown":
            return "▾"
        case "blacktriangleleft":
            return "◂"
        case "blacktriangleright":
            return "▸"
        case "blank":
            return "␣"
        case "blk12":
            return "▒"
        case "blk14":
            return "░"
        case "blk34":
            return "▓"
        case "block":
            return "█"
        case "bNot":
            return "⫭"
        case "bnot":
            return "⌐"
        case "Bopf":
            return "픹"
        case "bopf":
            return "핓"
        case "bot":
            return "⊥"
        case "bottom":
            return "⊥"
        case "bowtie":
            return "⋈"
        case "boxbox":
            return "⧉"
        case "boxDL":
            return "╗"
        case "boxDl":
            return "╖"
        case "boxdL":
            return "╕"
        case "boxdl":
            return "┐"
        case "boxDR":
            return "╔"
        case "boxDr":
            return "╓"
        case "boxdR":
            return "╒"
        case "boxdr":
            return "┌"
        case "boxH":
            return "═"
        case "boxh":
            return "─"
        case "boxHD":
            return "╦"
        case "boxHd":
            return "╤"
        case "boxhD":
            return "╥"
        case "boxhd":
            return "┬"
        case "boxHU":
            return "╩"
        case "boxHu":
            return "╧"
        case "boxhU":
            return "╨"
        case "boxhu":
            return "┴"
        case "boxminus":
            return "⊟"
        case "boxplus":
            return "⊞"
        case "boxtimes":
            return "⊠"
        case "boxUL":
            return "╝"
        case "boxUl":
            return "╜"
        case "boxuL":
            return "╛"
        case "boxul":
            return "┘"
        case "boxUR":
            return "╚"
        case "boxUr":
            return "╙"
        case "boxuR":
            return "╘"
        case "boxur":
            return "└"
        case "boxV":
            return "║"
        case "boxv":
            return "│"
        case "boxVH":
            return "╬"
        case "boxVh":
            return "╫"
        case "boxvH":
            return "╪"
        case "boxvh":
            return "┼"
        case "boxVL":
            return "╣"
        case "boxVl":
            return "╢"
        case "boxvL":
            return "╡"
        case "boxvl":
            return "┤"
        case "boxVR":
            return "╠"
        case "boxVr":
            return "╟"
        case "boxvR":
            return "╞"
        case "boxvr":
            return "├"
        case "bprime":
            return "‵"
        case "Breve":
            return "˘"
        case "breve":
            return "˘"
        case "brvbar":
            return "¦"
        case "Bscr":
            return "ℬ"
        case "bscr":
            return "풷"
        case "bsemi":
            return "⁏"
        case "bsim":
            return "∽"
        case "bsime":
            return "⋍"
        case "bsol":
            return "\\"
        case "bsolb":
            return "⧅"
        case "bsolhsub":
            return "⟈"
        case "bull":
            return "•"
        case "bullet":
            return "•"
        case "bump":
            return "≎"
        case "bumpE":
            return "⪮"
        case "bumpe":
            return "≏"
        case "Bumpeq":
            return "≎"
        case "bumpeq":
            return "≏"
        case "Cacute":
            return "Ć"
        case "cacute":
            return "ć"
        case "Cap":
            return "⋒"
        case "cap":
            return "∩"
        case "capand":
            return "⩄"
        case "capbrcup":
            return "⩉"
        case "capcap":
            return "⩋"
        case "capcup":
            return "⩇"
        case "capdot":
            return "⩀"
        case "CapitalDifferentialD":
            return "ⅅ"
        case "caret":
            return "⁁"
        case "caron":
            return "ˇ"
        case "Cayleys":
            return "ℭ"
        case "ccaps":
            return "⩍"
        case "Ccaron":
            return "Č"
        case "ccaron":
            return "č"
        case "Ccedil":
            return "Ç"
        case "ccedil":
            return "ç"
        case "Ccirc":
            return "Ĉ"
        case "ccirc":
            return "ĉ"
        case "Cconint":
            return "∰"
        case "ccups":
            return "⩌"
        case "ccupssm":
            return "⩐"
        case "Cdot":
            return "Ċ"
        case "cdot":
            return "ċ"
        case "cedil":
            return "¸"
        case "Cedilla":
            return "¸"
        case "cemptyv":
            return "⦲"
        case "cent":
            return "¢"
        case "CenterDot":
            return "·"
        case "centerdot":
            return "·"
        case "Cfr":
            return "ℭ"
        case "cfr":
            return "픠"
        case "CHcy":
            return "Ч"
        case "chcy":
            return "ч"
        case "check":
            return "✓"
        case "checkmark":
            return "✓"
        case "Chi":
            return "Χ"
        case "chi":
            return "χ"
        case "cir":
            return "○"
        case "circ":
            return "ˆ"
        case "circeq":
            return "≗"
        case "circlearrowleft":
            return "↺"
        case "circlearrowright":
            return "↻"
        case "circledast":
            return "⊛"
        case "circledcirc":
            return "⊚"
        case "circleddash":
            return "⊝"
        case "CircleDot":
            return "⊙"
        case "circledR":
            return "®"
        case "circledS":
            return "Ⓢ"
        case "CircleMinus":
            return "⊖"
        case "CirclePlus":
            return "⊕"
        case "CircleTimes":
            return "⊗"
        case "cirE":
            return "⧃"
        case "cire":
            return "≗"
        case "cirfnint":
            return "⨐"
        case "cirmid":
            return "⫯"
        case "cirscir":
            return "⧂"
        case "ClockwiseContourIntegral":
            return "∲"
        case "CloseCurlyDoubleQuote":
            return "”"
        case "CloseCurlyQuote":
            return "’"
        case "clubs":
            return "♣"
        case "clubsuit":
            return "♣"
        case "Colon":
            return "∷"
        case "colon":
            return ":"
        case "Colone":
            return "⩴"
        case "colone":
            return "≔"
        case "coloneq":
            return "≔"
        case "comma":
            return ","
        case "commat":
            return "@"
        case "comp":
            return "∁"
        case "compfn":
            return "∘"
        case "complement":
            return "∁"
        case "complexes":
            return "ℂ"
        case "cong":
            return "≅"
        case "congdot":
            return "⩭"
        case "Congruent":
            return "≡"
        case "Conint":
            return "∯"
        case "conint":
            return "∮"
        case "ContourIntegral":
            return "∮"
        case "Copf":
            return "ℂ"
        case "copf":
            return "핔"
        case "coprod":
            return "∐"
        case "Coproduct":
            return "∐"
        case "COPY":
            return "©"
        case "copy":
            return "©"
        case "copysr":
            return "℗"
        case "CounterClockwiseContourIntegral":
            return "∳"
        case "crarr":
            return "↵"
        case "Cross":
            return "⨯"
        case "cross":
            return "✗"
        case "Cscr":
            return "풞"
        case "cscr":
            return "풸"
        case "csub":
            return "⫏"
        case "csube":
            return "⫑"
        case "csup":
            return "⫐"
        case "csupe":
            return "⫒"
        case "ctdot":
            return "⋯"
        case "cudarrl":
            return "⤸"
        case "cudarrr":
            return "⤵"
        case "cuepr":
            return "⋞"
        case "cuesc":
            return "⋟"
        case "cularr":
            return "↶"
        case "cularrp":
            return "⤽"
        case "Cup":
            return "⋓"
        case "cup":
            return "∪"
        case "cupbrcap":
            return "⩈"
        case "CupCap":
            return "≍"
        case "cupcap":
            return "⩆"
        case "cupcup":
            return "⩊"
        case "cupdot":
            return "⊍"
        case "cupor":
            return "⩅"
        case "curarr":
            return "↷"
        case "curarrm":
            return "⤼"
        case "curlyeqprec":
            return "⋞"
        case "curlyeqsucc":
            return "⋟"
        case "curlyvee":
            return "⋎"
        case "curlywedge":
            return "⋏"
        case "curren":
            return "¤"
        case "curvearrowleft":
            return "↶"
        case "curvearrowright":
            return "↷"
        case "cuvee":
            return "⋎"
        case "cuwed":
            return "⋏"
        case "cwconint":
            return "∲"
        case "cwint":
            return "∱"
        case "cylcty":
            return "⌭"
        case "Dagger":
            return "‡"
        case "dagger":
            return "†"
        case "daleth":
            return "ℸ"
        case "Darr":
            return "↡"
        case "dArr":
            return "⇓"
        case "darr":
            return "↓"
        case "dash":
            return "‐"
        case "Dashv":
            return "⫤"
        case "dashv":
            return "⊣"
        case "dbkarow":
            return "⤏"
        case "dblac":
            return "˝"
        case "Dcaron":
            return "Ď"
        case "dcaron":
            return "ď"
        case "Dcy":
            return "Д"
        case "dcy":
            return "д"
        case "DD":
            return "ⅅ"
        case "dd":
            return "ⅆ"
        case "ddagger":
            return "‡"
        case "ddarr":
            return "⇊"
        case "DDotrahd":
            return "⤑"
        case "ddotseq":
            return "⩷"
        case "deg":
            return "°"
        case "Del":
            return "∇"
        case "Delta":
            return "Δ"
        case "delta":
            return "δ"
        case "demptyv":
            return "⦱"
        case "dfisht":
            return "⥿"
        case "Dfr":
            return "픇"
        case "dfr":
            return "픡"
        case "dHar":
            return "⥥"
        case "dharl":
            return "⇃"
        case "dharr":
            return "⇂"
        case "DiacriticalAcute":
            return "´"
        case "DiacriticalDot":
            return "˙"
        case "DiacriticalDoubleAcute":
            return "˝"
        case "DiacriticalGrave":
            return "`"
        case "DiacriticalTilde":
            return "˜"
        case "diam":
            return "⋄"
        case "Diamond":
            return "⋄"
        case "diamond":
            return "⋄"
        case "diamondsuit":
            return "♦"
        case "diams":
            return "♦"
        case "die":
            return "¨"
        case "DifferentialD":
            return "ⅆ"
        case "digamma":
            return "ϝ"
        case "disin":
            return "⋲"
        case "div":
            return "÷"
        case "divide":
            return "÷"
        case "divideontimes":
            return "⋇"
        case "divonx":
            return "⋇"
        case "DJcy":
            return "Ђ"
        case "djcy":
            return "ђ"
        case "dlcorn":
            return "⌞"
        case "dlcrop":
            return "⌍"
        case "dollar":
            return "$"
        case "Dopf":
            return "픻"
        case "dopf":
            return "핕"
        case "Dot":
            return "¨"
        case "dot":
            return "˙"
        case "doteq":
            return "≐"
        case "doteqdot":
            return "≑"
        case "DotEqual":
            return "≐"
        case "dotminus":
            return "∸"
        case "dotplus":
            return "∔"
        case "dotsquare":
            return "⊡"
        case "doublebarwedge":
            return "⌆"
        case "DoubleContourIntegral":
            return "∯"
        case "DoubleDot":
            return "¨"
        case "DoubleDownArrow":
            return "⇓"
        case "DoubleLeftArrow":
            return "⇐"
        case "DoubleLeftRightArrow":
            return "⇔"
        case "DoubleLeftTee":
            return "⫤"
        case "DoubleLongLeftArrow":
            return "⟸"
        case "DoubleLongLeftRightArrow":
            return "⟺"
        case "DoubleLongRightArrow":
            return "⟹"
        case "DoubleRightArrow":
            return "⇒"
        case "DoubleRightTee":
            return "⊨"
        case "DoubleUpArrow":
            return "⇑"
        case "DoubleUpDownArrow":
            return "⇕"
        case "DoubleVerticalBar":
            return "∥"
        case "DownArrow":
            return "↓"
        case "Downarrow":
            return "⇓"
        case "downarrow":
            return "↓"
        case "DownArrowBar":
            return "⤓"
        case "DownArrowUpArrow":
            return "⇵"
        case "downdownarrows":
            return "⇊"
        case "downharpoonleft":
            return "⇃"
        case "downharpoonright":
            return "⇂"
        case "DownLeftRightVector":
            return "⥐"
        case "DownLeftTeeVector":
            return "⥞"
        case "DownLeftVector":
            return "↽"
        case "DownLeftVectorBar":
            return "⥖"
        case "DownRightTeeVector":
            return "⥟"
        case "DownRightVector":
            return "⇁"
        case "DownRightVectorBar":
            return "⥗"
        case "DownTee":
            return "⊤"
        case "DownTeeArrow":
            return "↧"
        case "drbkarow":
            return "⤐"
        case "drcorn":
            return "⌟"
        case "drcrop":
            return "⌌"
        case "Dscr":
            return "풟"
        case "dscr":
            return "풹"
        case "DScy":
            return "Ѕ"
        case "dscy":
            return "ѕ"
        case "dsol":
            return "⧶"
        case "Dstrok":
            return "Đ"
        case "dstrok":
            return "đ"
        case "dtdot":
            return "⋱"
        case "dtri":
            return "▿"
        case "dtrif":
            return "▾"
        case "duarr":
            return "⇵"
        case "duhar":
            return "⥯"
        case "dwangle":
            return "⦦"
        case "DZcy":
            return "Џ"
        case "dzcy":
            return "џ"
        case "dzigrarr":
            return "⟿"
        case "Eacute":
            return "É"
        case "eacute":
            return "é"
        case "easter":
            return "⩮"
        case "Ecaron":
            return "Ě"
        case "ecaron":
            return "ě"
        case "ecir":
            return "≖"
        case "Ecirc":
            return "Ê"
        case "ecirc":
            return "ê"
        case "ecolon":
            return "≕"
        case "Ecy":
            return "Э"
        case "ecy":
            return "э"
        case "eDDot":
            return "⩷"
        case "Edot":
            return "Ė"
        case "eDot":
            return "≑"
        case "edot":
            return "ė"
        case "ee":
            return "ⅇ"
        case "efDot":
            return "≒"
        case "Efr":
            return "픈"
        case "efr":
            return "픢"
        case "eg":
            return "⪚"
        case "Egrave":
            return "È"
        case "egrave":
            return "è"
        case "egs":
            return "⪖"
        case "egsdot":
            return "⪘"
        case "el":
            return "⪙"
        case "Element":
            return "∈"
        case "elinters":
            return "⏧"
        case "ell":
            return "ℓ"
        case "els":
            return "⪕"
        case "elsdot":
            return "⪗"
        case "Emacr":
            return "Ē"
        case "emacr":
            return "ē"
        case "empty":
            return "∅"
        case "emptyset":
            return "∅"
        case "EmptySmallSquare":
            return "◻"
        case "emptyv":
            return "∅"
        case "EmptyVerySmallSquare":
            return "▫"
        case "emsp":
            return " "
        case "emsp13":
            return " "
        case "emsp14":
            return " "
        case "ENG":
            return "Ŋ"
        case "eng":
            return "ŋ"
        case "ensp":
            return " "
        case "Eogon":
            return "Ę"
        case "eogon":
            return "ę"
        case "Eopf":
            return "피"
        case "eopf":
            return "핖"
        case "epar":
            return "⋕"
        case "eparsl":
            return "⧣"
        case "eplus":
            return "⩱"
        case "epsi":
            return "ε"
        case "Epsilon":
            return "Ε"
        case "epsilon":
            return "ε"
        case "epsiv":
            return "ϵ"
        case "eqcirc":
            return "≖"
        case "eqcolon":
            return "≕"
        case "eqsim":
            return "≂"
        case "eqslantgtr":
            return "⪖"
        case "eqslantless":
            return "⪕"
        case "Equal":
            return "⩵"
        case "equals":
            return "="
        case "EqualTilde":
            return "≂"
        case "equest":
            return "≟"
        case "Equilibrium":
            return "⇌"
        case "equiv":
            return "≡"
        case "equivDD":
            return "⩸"
        case "eqvparsl":
            return "⧥"
        case "erarr":
            return "⥱"
        case "erDot":
            return "≓"
        case "Escr":
            return "ℰ"
        case "escr":
            return "ℯ"
        case "esdot":
            return "≐"
        case "Esim":
            return "⩳"
        case "esim":
            return "≂"
        case "Eta":
            return "Η"
        case "eta":
            return "η"
        case "ETH":
            return "Ð"
        case "eth":
            return "ð"
        case "Euml":
            return "Ë"
        case "euml":
            return "ë"
        case "euro":
            return "€"
        case "excl":
            return "!"
        case "exist":
            return "∃"
        case "Exists":
            return "∃"
        case "expectation":
            return "ℰ"
        case "ExponentialE":
            return "ⅇ"
        case "exponentiale":
            return "ⅇ"
        case "fallingdotseq":
            return "≒"
        case "Fcy":
            return "Ф"
        case "fcy":
            return "ф"
        case "female":
            return "♀"
        case "ffilig":
            return "ﬃ"
        case "fflig":
            return "ﬀ"
        case "ffllig":
            return "ﬄ"
        case "Ffr":
            return "픉"
        case "ffr":
            return "픣"
        case "filig":
            return "ﬁ"
        case "FilledSmallSquare":
            return "◼"
        case "FilledVerySmallSquare":
            return "▪"
        case "flat":
            return "♭"
        case "fllig":
            return "ﬂ"
        case "fltns":
            return "▱"
        case "fnof":
            return "ƒ"
        case "Fopf":
            return "픽"
        case "fopf":
            return "핗"
        case "ForAll":
            return "∀"
        case "forall":
            return "∀"
        case "fork":
            return "⋔"
        case "forkv":
            return "⫙"
        case "Fouriertrf":
            return "ℱ"
        case "fpartint":
            return "⨍"
        case "frac12":
            return "½"
        case "frac13":
            return "⅓"
        case "frac14":
            return "¼"
        case "frac15":
            return "⅕"
        case "frac16":
            return "⅙"
        case "frac18":
            return "⅛"
        case "frac23":
            return "⅔"
        case "frac25":
            return "⅖"
        case "frac34":
            return "¾"
        case "frac35":
            return "⅗"
        case "frac38":
            return "⅜"
        case "frac45":
            return "⅘"
        case "frac56":
            return "⅚"
        case "frac58":
            return "⅝"
        case "frac78":
            return "⅞"
        case "frasl":
            return "⁄"
        case "frown":
            return "⌢"
        case "Fscr":
            return "ℱ"
        case "fscr":
            return "풻"
        case "gacute":
            return "ǵ"
        case "Gamma":
            return "Γ"
        case "gamma":
            return "γ"
        case "Gammad":
            return "Ϝ"
        case "gammad":
            return "ϝ"
        case "gap":
            return "⪆"
        case "Gbreve":
            return "Ğ"
        case "gbreve":
            return "ğ"
        case "Gcedil":
            return "Ģ"
        case "Gcirc":
            return "Ĝ"
        case "gcirc":
            return "ĝ"
        case "Gcy":
            return "Г"
        case "gcy":
            return "г"
        case "Gdot":
            return "Ġ"
        case "gdot":
            return "ġ"
        case "gE":
            return "≧"
        case "ge":
            return "≥"
        case "gEl":
            return "⪌"
        case "gel":
            return "⋛"
        case "geq":
            return "≥"
        case "geqq":
            return "≧"
        case "geqslant":
            return "⩾"
        case "ges":
            return "⩾"
        case "gescc":
            return "⪩"
        case "gesdot":
            return "⪀"
        case "gesdoto":
            return "⪂"
        case "gesdotol":
            return "⪄"
        case "gesles":
            return "⪔"
        case "Gfr":
            return "픊"
        case "gfr":
            return "픤"
        case "Gg":
            return "⋙"
        case "gg":
            return "≫"
        case "ggg":
            return "⋙"
        case "gimel":
            return "ℷ"
        case "GJcy":
            return "Ѓ"
        case "gjcy":
            return "ѓ"
        case "gl":
            return "≷"
        case "gla":
            return "⪥"
        case "glE":
            return "⪒"
        case "glj":
            return "⪤"
        case "gnap":
            return "⪊"
        case "gnapprox":
            return "⪊"
        case "gnE":
            return "≩"
        case "gne":
            return "⪈"
        case "gneq":
            return "⪈"
        case "gneqq":
            return "≩"
        case "gnsim":
            return "⋧"
        case "Gopf":
            return "픾"
        case "gopf":
            return "하"
        case "grave":
            return "`"
        case "GreaterEqual":
            return "≥"
        case "GreaterEqualLess":
            return "⋛"
        case "GreaterFullEqual":
            return "≧"
        case "GreaterGreater":
            return "⪢"
        case "GreaterLess":
            return "≷"
        case "GreaterSlantEqual":
            return "⩾"
        case "GreaterTilde":
            return "≳"
        case "Gscr":
            return "풢"
        case "gscr":
            return "ℊ"
        case "gsim":
            return "≳"
        case "gsime":
            return "⪎"
        case "gsiml":
            return "⪐"
        case "GT":
            return ">"
        case "Gt":
            return "≫"
        case "gt":
            return ">"
        case "gtcc":
            return "⪧"
        case "gtcir":
            return "⩺"
        case "gtdot":
            return "⋗"
        case "gtlPar":
            return "⦕"
        case "gtquest":
            return "⩼"
        case "gtrapprox":
            return "⪆"
        case "gtrarr":
            return "⥸"
        case "gtrdot":
            return "⋗"
        case "gtreqless":
            return "⋛"
        case "gtreqqless":
            return "⪌"
        case "gtrless":
            return "≷"
        case "gtrsim":
            return "≳"
        case "Hacek":
            return "ˇ"
        case "hairsp":
            return " "
        case "half":
            return "½"
        case "hamilt":
            return "ℋ"
        case "HARDcy":
            return "Ъ"
        case "hardcy":
            return "ъ"
        case "hArr":
            return "⇔"
        case "harr":
            return "↔"
        case "harrcir":
            return "⥈"
        case "harrw":
            return "↭"
        case "Hat":
            return "^"
        case "hbar":
            return "ℏ"
        case "Hcirc":
            return "Ĥ"
        case "hcirc":
            return "ĥ"
        case "hearts":
            return "♥"
        case "heartsuit":
            return "♥"
        case "hellip":
            return "…"
        case "hercon":
            return "⊹"
        case "Hfr":
            return "ℌ"
        case "hfr":
            return "픥"
        case "HilbertSpace":
            return "ℋ"
        case "hksearow":
            return "⤥"
        case "hkswarow":
            return "⤦"
        case "hoarr":
            return "⇿"
        case "homtht":
            return "∻"
        case "hookleftarrow":
            return "↩"
        case "hookrightarrow":
            return "↪"
        case "Hopf":
            return "ℍ"
        case "hopf":
            return "학"
        case "horbar":
            return "―"
        case "HorizontalLine":
            return "─"
        case "Hscr":
            return "ℋ"
        case "hscr":
            return "풽"
        case "hslash":
            return "ℏ"
        case "Hstrok":
            return "Ħ"
        case "hstrok":
            return "ħ"
        case "HumpDownHump":
            return "≎"
        case "HumpEqual":
            return "≏"
        case "hybull":
            return "⁃"
        case "hyphen":
            return "‐"
        case "Iacute":
            return "Í"
        case "iacute":
            return "í"
        case "ic":
            return "⁣"
        case "Icirc":
            return "Î"
        case "icirc":
            return "î"
        case "Icy":
            return "И"
        case "icy":
            return "и"
        case "Idot":
            return "İ"
        case "IEcy":
            return "Е"
        case "iecy":
            return "е"
        case "iexcl":
            return "¡"
        case "iff":
            return "⇔"
        case "Ifr":
            return "ℑ"
        case "ifr":
            return "픦"
        case "Igrave":
            return "Ì"
        case "igrave":
            return "ì"
        case "ii":
            return "ⅈ"
        case "iiiint":
            return "⨌"
        case "iiint":
            return "∭"
        case "iinfin":
            return "⧜"
        case "iiota":
            return "℩"
        case "IJlig":
            return "Ĳ"
        case "ijlig":
            return "ĳ"
        case "Im":
            return "ℑ"
        case "Imacr":
            return "Ī"
        case "imacr":
            return "ī"
        case "image":
            return "ℑ"
        case "ImaginaryI":
            return "ⅈ"
        case "imagline":
            return "ℐ"
        case "imagpart":
            return "ℑ"
        case "imath":
            return "ı"
        case "imof":
            return "⊷"
        case "imped":
            return "Ƶ"
        case "Implies":
            return "⇒"
        case "in":
            return "∈"
        case "incare":
            return "℅"
        case "infin":
            return "∞"
        case "infintie":
            return "⧝"
        case "inodot":
            return "ı"
        case "Int":
            return "∬"
        case "int":
            return "∫"
        case "intcal":
            return "⊺"
        case "integers":
            return "ℤ"
        case "Integral":
            return "∫"
        case "intercal":
            return "⊺"
        case "Intersection":
            return "⋂"
        case "intlarhk":
            return "⨗"
        case "intprod":
            return "⨼"
        case "InvisibleComma":
            return "⁣"
        case "InvisibleTimes":
            return "⁢"
        case "IOcy":
            return "Ё"
        case "iocy":
            return "ё"
        case "Iogon":
            return "Į"
        case "iogon":
            return "į"
        case "Iopf":
            return "핀"
        case "iopf":
            return "핚"
        case "Iota":
            return "Ι"
        case "iota":
            return "ι"
        case "iprod":
            return "⨼"
        case "iquest":
            return "¿"
        case "Iscr":
            return "ℐ"
        case "iscr":
            return "풾"
        case "isin":
            return "∈"
        case "isindot":
            return "⋵"
        case "isinE":
            return "⋹"
        case "isins":
            return "⋴"
        case "isinsv":
            return "⋳"
        case "isinv":
            return "∈"
        case "it":
            return "⁢"
        case "Itilde":
            return "Ĩ"
        case "itilde":
            return "ĩ"
        case "Iukcy":
            return "І"
        case "iukcy":
            return "і"
        case "Iuml":
            return "Ï"
        case "iuml":
            return "ï"
        case "Jcirc":
            return "Ĵ"
        case "jcirc":
            return "ĵ"
        case "Jcy":
            return "Й"
        case "jcy":
            return "й"
        case "Jfr":
            return "픍"
        case "jfr":
            return "픧"
        case "jmath":
            return "ȷ"
        case "Jopf":
            return "핁"
        case "jopf":
            return "핛"
        case "Jscr":
            return "풥"
        case "jscr":
            return "풿"
        case "Jsercy":
            return "Ј"
        case "jsercy":
            return "ј"
        case "Jukcy":
            return "Є"
        case "jukcy":
            return "є"
        case "Kappa":
            return "Κ"
        case "kappa":
            return "κ"
        case "kappav":
            return "ϰ"
        case "Kcedil":
            return "Ķ"
        case "kcedil":
            return "ķ"
        case "Kcy":
            return "К"
        case "kcy":
            return "к"
        case "Kfr":
            return "픎"
        case "kfr":
            return "픨"
        case "kgreen":
            return "ĸ"
        case "KHcy":
            return "Х"
        case "khcy":
            return "х"
        case "KJcy":
            return "Ќ"
        case "kjcy":
            return "ќ"
        case "Kopf":
            return "핂"
        case "kopf":
            return "한"
        case "Kscr":
            return "풦"
        case "kscr":
            return "퓀"
        case "lAarr":
            return "⇚"
        case "Lacute":
            return "Ĺ"
        case "lacute":
            return "ĺ"
        case "laemptyv":
            return "⦴"
        case "lagran":
            return "ℒ"
        case "Lambda":
            return "Λ"
        case "lambda":
            return "λ"
        case "Lang":
            return "⟪"
        case "lang":
            return "⟨"
        case "langd":
            return "⦑"
        case "langle":
            return "〈"
        case "lap":
            return "⪅"
        case "Laplacetrf":
            return "ℒ"
        case "laquo":
            return "«"
        case "Larr":
            return "↞"
        case "lArr":
            return "⇐"
        case "larr":
            return "←"
        case "larrb":
            return "⇤"
        case "larrbfs":
            return "⤟"
        case "larrfs":
            return "⤝"
        case "larrhk":
            return "↩"
        case "larrlp":
            return "↫"
        case "larrpl":
            return "⤹"
        case "larrsim":
            return "⥳"
        case "larrtl":
            return "↢"
        case "lat":
            return "⪫"
        case "lAtail":
            return "⤛"
        case "latail":
            return "⤙"
        case "late":
            return "⪭"
        case "lBarr":
            return "⤎"
        case "lbarr":
            return "⤌"
        case "lbbrk":
            return "❲"
        case "lbrace":
            return "{"
        case "lbrack":
            return "["
        case "lbrke":
            return "⦋"
        case "lbrksld":
            return "⦏"
        case "lbrkslu":
            return "⦍"
        case "Lcaron":
            return "Ľ"
        case "lcaron":
            return "ľ"
        case "Lcedil":
            return "Ļ"
        case "lcedil":
            return "ļ"
        case "lceil":
            return "⌈"
        case "lcub":
            return "{"
        case "Lcy":
            return "Л"
        case "lcy":
            return "л"
        case "ldca":
            return "⤶"
        case "ldquo":
            return "“"
        case "ldquor":
            return "„"
        case "ldrdhar":
            return "⥧"
        case "ldrushar":
            return "⥋"
        case "ldsh":
            return "↲"
        case "lE":
            return "≦"
        case "le":
            return "≤"
        case "LeftAngleBracket":
            return "〈"
        case "LeftArrow":
            return "←"
        case "Leftarrow":
            return "⇐"
        case "leftarrow":
            return "←"
        case "LeftArrowBar":
            return "⇤"
        case "LeftArrowRightArrow":
            return "⇆"
        case "leftarrowtail":
            return "↢"
        case "LeftCeiling":
            return "⌈"
        case "LeftDoubleBracket":
            return "⟦"
        case "LeftDownTeeVector":
            return "⥡"
        case "LeftDownVector":
            return "⇃"
        case "LeftDownVectorBar":
            return "⥙"
        case "LeftFloor":
            return "⌊"
        case "leftharpoondown":
            return "↽"
        case "leftharpoonup":
            return "↼"
        case "leftleftarrows":
            return "⇇"
        case "LeftRightArrow":
            return "↔"
        case "Leftrightarrow":
            return "⇔"
        case "leftrightarrow":
            return "↔"
        case "leftrightarrows":
            return "⇆"
        case "leftrightharpoons":
            return "⇋"
        case "leftrightsquigarrow":
            return "↭"
        case "LeftRightVector":
            return "⥎"
        case "LeftTee":
            return "⊣"
        case "LeftTeeArrow":
            return "↤"
        case "LeftTeeVector":
            return "⥚"
        case "leftthreetimes":
            return "⋋"
        case "LeftTriangle":
            return "⊲"
        case "LeftTriangleBar":
            return "⧏"
        case "LeftTriangleEqual":
            return "⊴"
        case "LeftUpDownVector":
            return "⥑"
        case "LeftUpTeeVector":
            return "⥠"
        case "LeftUpVector":
            return "↿"
        case "LeftUpVectorBar":
            return "⥘"
        case "LeftVector":
            return "↼"
        case "LeftVectorBar":
            return "⥒"
        case "lEg":
            return "⪋"
        case "leg":
            return "⋚"
        case "leq":
            return "≤"
        case "leqq":
            return "≦"
        case "leqslant":
            return "⩽"
        case "les":
            return "⩽"
        case "lescc":
            return "⪨"
        case "lesdot":
            return "⩿"
        case "lesdoto":
            return "⪁"
        case "lesdotor":
            return "⪃"
        case "lesges":
            return "⪓"
        case "lessapprox":
            return "⪅"
        case "lessdot":
            return "⋖"
        case "lesseqgtr":
            return "⋚"
        case "lesseqqgtr":
            return "⪋"
        case "LessEqualGreater":
            return "⋚"
        case "LessFullEqual":
            return "≦"
        case "LessGreater":
            return "≶"
        case "lessgtr":
            return "≶"
        case "LessLess":
            return "⪡"
        case "lesssim":
            return "≲"
        case "LessSlantEqual":
            return "⩽"
        case "LessTilde":
            return "≲"
        case "lfisht":
            return "⥼"
        case "lfloor":
            return "⌊"
        case "Lfr":
            return "픏"
        case "lfr":
            return "픩"
        case "lg":
            return "≶"
        case "lgE":
            return "⪑"
        case "lHar":
            return "⥢"
        case "lhard":
            return "↽"
        case "lharu":
            return "↼"
        case "lharul":
            return "⥪"
        case "lhblk":
            return "▄"
        case "LJcy":
            return "Љ"
        case "ljcy":
            return "љ"
        case "Ll":
            return "⋘"
        case "ll":
            return "≪"
        case "llarr":
            return "⇇"
        case "llcorner":
            return "⌞"
        case "Lleftarrow":
            return "⇚"
        case "llhard":
            return "⥫"
        case "lltri":
            return "◺"
        case "Lmidot":
            return "Ŀ"
        case "lmidot":
            return "ŀ"
        case "lmoust":
            return "⎰"
        case "lmoustache":
            return "⎰"
        case "lnap":
            return "⪉"
        case "lnapprox":
            return "⪉"
        case "lnE":
            return "≨"
        case "lne":
            return "⪇"
        case "lneq":
            return "⪇"
        case "lneqq":
            return "≨"
        case "lnsim":
            return "⋦"
        case "loang":
            return "⟬"
        case "loarr":
            return "⇽"
        case "lobrk":
            return "⟦"
        case "LongLeftArrow":
            return "⟵"
        case "Longleftarrow":
            return "⟸"
        case "longleftarrow":
            return "⟵"
        case "LongLeftRightArrow":
            return "⟷"
        case "Longleftrightarrow":
            return "⟺"
        case "longleftrightarrow":
            return "⟷"
        case "longmapsto":
            return "⟼"
        case "LongRightArrow":
            return "⟶"
        case "Longrightarrow":
            return "⟹"
        case "longrightarrow":
            return "⟶"
        case "looparrowleft":
            return "↫"
        case "looparrowright":
            return "↬"
        case "lopar":
            return "⦅"
        case "Lopf":
            return "핃"
        case "lopf":
            return "핝"
        case "loplus":
            return "⨭"
        case "lotimes":
            return "⨴"
        case "lowast":
            return "∗"
        case "lowbar":
            return "_"
        case "LowerLeftArrow":
            return "↙"
        case "LowerRightArrow":
            return "↘"
        case "loz":
            return "◊"
        case "lozenge":
            return "◊"
        case "lozf":
            return "⧫"
        case "lpar":
            return "("
        case "lparlt":
            return "⦓"
        case "lrarr":
            return "⇆"
        case "lrcorner":
            return "⌟"
        case "lrhar":
            return "⇋"
        case "lrhard":
            return "⥭"
        case "lrm":
            return "‎"
        case "lrtri":
            return "⊿"
        case "lsaquo":
            return "‹"
        case "Lscr":
            return "ℒ"
        case "lscr":
            return "퓁"
        case "Lsh":
            return "↰"
        case "lsh":
            return "↰"
        case "lsim":
            return "≲"
        case "lsime":
            return "⪍"
        case "lsimg":
            return "⪏"
        case "lsqb":
            return "["
        case "lsquo":
            return "‘"
        case "lsquor":
            return "‚"
        case "Lstrok":
            return "Ł"
        case "lstrok":
            return "ł"
        case "LT":
            return "<"
        case "Lt":
            return "≪"
        case "lt":
            return "<"
        case "ltcc":
            return "⪦"
        case "ltcir":
            return "⩹"
        case "ltdot":
            return "⋖"
        case "lthree":
            return "⋋"
        case "ltimes":
            return "⋉"
        case "ltlarr":
            return "⥶"
        case "ltquest":
            return "⩻"
        case "ltri":
            return "◃"
        case "ltrie":
            return "⊴"
        case "ltrif":
            return "◂"
        case "ltrPar":
            return "⦖"
        case "lurdshar":
            return "⥊"
        case "luruhar":
            return "⥦"
        case "macr":
            return "¯"
        case "male":
            return "♂"
        case "malt":
            return "✠"
        case "maltese":
            return "✠"
        case "Map":
            return "⤅"
        case "map":
            return "↦"
        case "mapsto":
            return "↦"
        case "mapstodown":
            return "↧"
        case "mapstoleft":
            return "↤"
        case "mapstoup":
            return "↥"
        case "marker":
            return "▮"
        case "mcomma":
            return "⨩"
        case "Mcy":
            return "М"
        case "mcy":
            return "м"
        case "mdash":
            return "—"
        case "mDDot":
            return "∺"
        case "measuredangle":
            return "∡"
        case "MediumSpace":
            return " "
        case "Mellintrf":
            return "ℳ"
        case "Mfr":
            return "픐"
        case "mfr":
            return "픪"
        case "mho":
            return "℧"
        case "micro":
            return "µ"
        case "mid":
            return "∣"
        case "midast":
            return "*"
        case "midcir":
            return "⫰"
        case "middot":
            return "·"
        case "minus":
            return "−"
        case "minusb":
            return "⊟"
        case "minusd":
            return "∸"
        case "minusdu":
            return "⨪"
        case "MinusPlus":
            return "∓"
        case "mlcp":
            return "⫛"
        case "mldr":
            return "…"
        case "mnplus":
            return "∓"
        case "models":
            return "⊧"
        case "Mopf":
            return "필"
        case "mopf":
            return "핞"
        case "mp":
            return "∓"
        case "Mscr":
            return "ℳ"
        case "mscr":
            return "퓂"
        case "mstpos":
            return "∾"
        case "Mu":
            return "Μ"
        case "mu":
            return "μ"
        case "multimap":
            return "⊸"
        case "mumap":
            return "⊸"
        case "nabla":
            return "∇"
        case "Nacute":
            return "Ń"
        case "nacute":
            return "ń"
        case "nap":
            return "≉"
        case "napos":
            return "ŉ"
        case "napprox":
            return "≉"
        case "natur":
            return "♮"
        case "natural":
            return "♮"
        case "naturals":
            return "ℕ"
        case "nbsp":
            return " "
        case "ncap":
            return "⩃"
        case "Ncaron":
            return "Ň"
        case "ncaron":
            return "ň"
        case "Ncedil":
            return "Ņ"
        case "ncedil":
            return "ņ"
        case "ncong":
            return "≇"
        case "ncup":
            return "⩂"
        case "Ncy":
            return "Н"
        case "ncy":
            return "н"
        case "ndash":
            return "–"
        case "ne":
            return "≠"
        case "nearhk":
            return "⤤"
        case "neArr":
            return "⇗"
        case "nearr":
            return "↗"
        case "nearrow":
            return "↗"
        case "NegativeMediumSpace":
            return "​"
        case "NegativeThickSpace":
            return "​"
        case "NegativeThinSpace":
            return "​"
        case "NegativeVeryThinSpace":
            return "​"
        case "nequiv":
            return "≢"
        case "nesear":
            return "⤨"
        case "NestedGreaterGreater":
            return "≫"
        case "NestedLessLess":
            return "≪"
        case "nexist":
            return "∄"
        case "nexists":
            return "∄"
        case "Nfr":
            return "픑"
        case "nfr":
            return "픫"
        case "nge":
            return "≱"
        case "ngeq":
            return "≱"
        case "ngsim":
            return "≵"
        case "ngt":
            return "≯"
        case "ngtr":
            return "≯"
        case "nhArr":
            return "⇎"
        case "nharr":
            return "↮"
        case "nhpar":
            return "⫲"
        case "ni":
            return "∋"
        case "nis":
            return "⋼"
        case "nisd":
            return "⋺"
        case "niv":
            return "∋"
        case "NJcy":
            return "Њ"
        case "njcy":
            return "њ"
        case "nlArr":
            return "⇍"
        case "nlarr":
            return "↚"
        case "nldr":
            return "‥"
        case "nle":
            return "≰"
        case "nLeftarrow":
            return "⇍"
        case "nleftarrow":
            return "↚"
        case "nLeftrightarrow":
            return "⇎"
        case "nleftrightarrow":
            return "↮"
        case "nleq":
            return "≰"
        case "nless":
            return "≮"
        case "nlsim":
            return "≴"
        case "nlt":
            return "≮"
        case "nltri":
            return "⋪"
        case "nltrie":
            return "⋬"
        case "nmid":
            return "∤"
        case "NoBreak":
            return "⁠"
        case "NonBreakingSpace":
            return " "
        case "Nopf":
            return "ℕ"
        case "nopf":
            return "핟"
        case "Not":
            return "⫬"
        case "not":
            return "¬"
        case "NotCongruent":
            return "≢"
        case "NotCupCap":
            return "≭"
        case "NotDoubleVerticalBar":
            return "∦"
        case "NotElement":
            return "∉"
        case "NotEqual":
            return "≠"
        case "NotExists":
            return "∄"
        case "NotGreater":
            return "≯"
        case "NotGreaterEqual":
            return "≱"
        case "NotGreaterLess":
            return "≹"
        case "NotGreaterTilde":
            return "≵"
        case "notin":
            return "∉"
        case "notinva":
            return "∉"
        case "notinvb":
            return "⋷"
        case "notinvc":
            return "⋶"
        case "NotLeftTriangle":
            return "⋪"
        case "NotLeftTriangleEqual":
            return "⋬"
        case "NotLess":
            return "≮"
        case "NotLessEqual":
            return "≰"
        case "NotLessGreater":
            return "≸"
        case "NotLessTilde":
            return "≴"
        case "notni":
            return "∌"
        case "notniva":
            return "∌"
        case "notnivb":
            return "⋾"
        case "notnivc":
            return "⋽"
        case "NotPrecedes":
            return "⊀"
        case "NotPrecedesSlantEqual":
            return "⋠"
        case "NotReverseElement":
            return "∌"
        case "NotRightTriangle":
            return "⋫"
        case "NotRightTriangleEqual":
            return "⋭"
        case "NotSquareSubsetEqual":
            return "⋢"
        case "NotSquareSupersetEqual":
            return "⋣"
        case "NotSubsetEqual":
            return "⊈"
        case "NotSucceeds":
            return "⊁"
        case "NotSucceedsSlantEqual":
            return "⋡"
        case "NotSupersetEqual":
            return "⊉"
        case "NotTilde":
            return "≁"
        case "NotTildeEqual":
            return "≄"
        case "NotTildeFullEqual":
            return "≇"
        case "NotTildeTilde":
            return "≉"
        case "NotVerticalBar":
            return "∤"
        case "npar":
            return "∦"
        case "nparallel":
            return "∦"
        case "npolint":
            return "⨔"
        case "npr":
            return "⊀"
        case "nprcue":
            return "⋠"
        case "nprec":
            return "⊀"
        case "nrArr":
            return "⇏"
        case "nrarr":
            return "↛"
        case "nRightarrow":
            return "⇏"
        case "nrightarrow":
            return "↛"
        case "nrtri":
            return "⋫"
        case "nrtrie":
            return "⋭"
        case "nsc":
            return "⊁"
        case "nsccue":
            return "⋡"
        case "Nscr":
            return "풩"
        case "nscr":
            return "퓃"
        case "nshortmid":
            return "∤"
        case "nshortparallel":
            return "∦"
        case "nsim":
            return "≁"
        case "nsime":
            return "≄"
        case "nsimeq":
            return "≄"
        case "nsmid":
            return "∤"
        case "nspar":
            return "∦"
        case "nsqsube":
            return "⋢"
        case "nsqsupe":
            return "⋣"
        case "nsub":
            return "⊄"
        case "nsube":
            return "⊈"
        case "nsubseteq":
            return "⊈"
        case "nsucc":
            return "⊁"
        case "nsup":
            return "⊅"
        case "nsupe":
            return "⊉"
        case "nsupseteq":
            return "⊉"
        case "ntgl":
            return "≹"
        case "Ntilde":
            return "Ñ"
        case "ntilde":
            return "ñ"
        case "ntlg":
            return "≸"
        case "ntriangleleft":
            return "⋪"
        case "ntrianglelefteq":
            return "⋬"
        case "ntriangleright":
            return "⋫"
        case "ntrianglerighteq":
            return "⋭"
        case "Nu":
            return "Ν"
        case "nu":
            return "ν"
        case "num":
            return "#"
        case "numero":
            return "№"
        case "numsp":
            return " "
        case "nVDash":
            return "⊯"
        case "nVdash":
            return "⊮"
        case "nvDash":
            return "⊭"
        case "nvdash":
            return "⊬"
        case "nvHarr":
            return "⤄"
        case "nvinfin":
            return "⧞"
        case "nvlArr":
            return "⤂"
        case "nvrArr":
            return "⤃"
        case "nwarhk":
            return "⤣"
        case "nwArr":
            return "⇖"
        case "nwarr":
            return "↖"
        case "nwarrow":
            return "↖"
        case "nwnear":
            return "⤧"
        case "Oacute":
            return "Ó"
        case "oacute":
            return "ó"
        case "oast":
            return "⊛"
        case "ocir":
            return "⊚"
        case "Ocirc":
            return "Ô"
        case "ocirc":
            return "ô"
        case "Ocy":
            return "О"
        case "ocy":
            return "о"
        case "odash":
            return "⊝"
        case "Odblac":
            return "Ő"
        case "odblac":
            return "ő"
        case "odiv":
            return "⨸"
        case "odot":
            return "⊙"
        case "odsold":
            return "⦼"
        case "OElig":
            return "Œ"
        case "oelig":
            return "œ"
        case "ofcir":
            return "⦿"
        case "Ofr":
            return "픒"
        case "ofr":
            return "픬"
        case "ogon":
            return "˛"
        case "Ograve":
            return "Ò"
        case "ograve":
            return "ò"
        case "ogt":
            return "⧁"
        case "ohbar":
            return "⦵"
        case "ohm":
            return "Ω"
        case "oint":
            return "∮"
        case "olarr":
            return "↺"
        case "olcir":
            return "⦾"
        case "olcross":
            return "⦻"
        case "oline":
            return "‾"
        case "olt":
            return "⧀"
        case "Omacr":
            return "Ō"
        case "omacr":
            return "ō"
        case "Omega":
            return "Ω"
        case "omega":
            return "ω"
        case "Omicron":
            return "Ο"
        case "omicron":
            return "ο"
        case "omid":
            return "⦶"
        case "ominus":
            return "⊖"
        case "Oopf":
            return "핆"
        case "oopf":
            return "할"
        case "opar":
            return "⦷"
        case "OpenCurlyDoubleQuote":
            return "“"
        case "OpenCurlyQuote":
            return "‘"
        case "operp":
            return "⦹"
        case "oplus":
            return "⊕"
        case "Or":
            return "⩔"
        case "or":
            return "∨"
        case "orarr":
            return "↻"
        case "ord":
            return "⩝"
        case "order":
            return "ℴ"
        case "orderof":
            return "ℴ"
        case "ordf":
            return "ª"
        case "ordm":
            return "º"
        case "origof":
            return "⊶"
        case "oror":
            return "⩖"
        case "orslope":
            return "⩗"
        case "orv":
            return "⩛"
        case "oS":
            return "Ⓢ"
        case "Oscr":
            return "풪"
        case "oscr":
            return "ℴ"
        case "Oslash":
            return "Ø"
        case "oslash":
            return "ø"
        case "osol":
            return "⊘"
        case "Otilde":
            return "Õ"
        case "otilde":
            return "õ"
        case "Otimes":
            return "⨷"
        case "otimes":
            return "⊗"
        case "otimesas":
            return "⨶"
        case "Ouml":
            return "Ö"
        case "ouml":
            return "ö"
        case "ovbar":
            return "⌽"
        case "OverBar":
            return "‾"
        case "OverBrace":
            return "⏞"
        case "OverBracket":
            return "⎴"
        case "OverParenthesis":
            return "⏜"
        case "par":
            return "∥"
        case "para":
            return "¶"
        case "parallel":
            return "∥"
        case "parsim":
            return "⫳"
        case "parsl":
            return "⫽"
        case "part":
            return "∂"
        case "PartialD":
            return "∂"
        case "Pcy":
            return "П"
        case "pcy":
            return "п"
        case "percnt":
            return "%"
        case "period":
            return "."
        case "permil":
            return "‰"
        case "perp":
            return "⊥"
        case "pertenk":
            return "‱"
        case "Pfr":
            return "픓"
        case "pfr":
            return "픭"
        case "Phi":
            return "Φ"
        case "phi":
            return "φ"
        case "phiv":
            return "ϕ"
        case "phmmat":
            return "ℳ"
        case "phone":
            return "☎"
        case "Pi":
            return "Π"
        case "pi":
            return "π"
        case "pitchfork":
            return "⋔"
        case "piv":
            return "ϖ"
        case "planck":
            return "ℏ"
        case "planckh":
            return "ℎ"
        case "plankv":
            return "ℏ"
        case "plus":
            return "+"
        case "plusacir":
            return "⨣"
        case "plusb":
            return "⊞"
        case "pluscir":
            return "⨢"
        case "plusdo":
            return "∔"
        case "plusdu":
            return "⨥"
        case "pluse":
            return "⩲"
        case "PlusMinus":
            return "±"
        case "plusmn":
            return "±"
        case "plussim":
            return "⨦"
        case "plustwo":
            return "⨧"
        case "pm":
            return "±"
        case "Poincareplane":
            return "ℌ"
        case "pointint":
            return "⨕"
        case "Popf":
            return "ℙ"
        case "popf":
            return "핡"
        case "pound":
            return "£"
        case "Pr":
            return "⪻"
        case "pr":
            return "≺"
        case "prap":
            return "⪷"
        case "prcue":
            return "≼"
        case "prE":
            return "⪳"
        case "pre":
            return "⪯"
        case "prec":
            return "≺"
        case "precapprox":
            return "⪷"
        case "preccurlyeq":
            return "≼"
        case "Precedes":
            return "≺"
        case "PrecedesEqual":
            return "⪯"
        case "PrecedesSlantEqual":
            return "≼"
        case "PrecedesTilde":
            return "≾"
        case "preceq":
            return "⪯"
        case "precnapprox":
            return "⪹"
        case "precneqq":
            return "⪵"
        case "precnsim":
            return "⋨"
        case "precsim":
            return "≾"
        case "Prime":
            return "″"
        case "prime":
            return "′"
        case "primes":
            return "ℙ"
        case "prnap":
            return "⪹"
        case "prnE":
            return "⪵"
        case "prnsim":
            return "⋨"
        case "prod":
            return "∏"
        case "Product":
            return "∏"
        case "profalar":
            return "⌮"
        case "profline":
            return "⌒"
        case "profsurf":
            return "⌓"
        case "prop":
            return "∝"
        case "Proportion":
            return "∷"
        case "Proportional":
            return "∝"
        case "propto":
            return "∝"
        case "prsim":
            return "≾"
        case "prurel":
            return "⊰"
        case "Pscr":
            return "풫"
        case "pscr":
            return "퓅"
        case "Psi":
            return "Ψ"
        case "psi":
            return "ψ"
        case "puncsp":
            return " "
        case "Qfr":
            return "픔"
        case "qfr":
            return "픮"
        case "qint":
            return "⨌"
        case "Qopf":
            return "ℚ"
        case "qopf":
            return "핢"
        case "qprime":
            return "⁗"
        case "Qscr":
            return "풬"
        case "qscr":
            return "퓆"
        case "quaternions":
            return "ℍ"
        case "quatint":
            return "⨖"
        case "quest":
            return "?"
        case "questeq":
            return "≟"
        case "QUOT":
            return "\""
        case "quot":
            return "\""
        case "rAarr":
            return "⇛"
        case "Racute":
            return "Ŕ"
        case "racute":
            return "ŕ"
        case "radic":
            return "√"
        case "raemptyv":
            return "⦳"
        case "Rang":
            return "⟫"
        case "rang":
            return "⟩"
        case "rangd":
            return "⦒"
        case "range":
            return "⦥"
        case "rangle":
            return "〉"
        case "raquo":
            return "»"
        case "Rarr":
            return "↠"
        case "rArr":
            return "⇒"
        case "rarr":
            return "→"
        case "rarrap":
            return "⥵"
        case "rarrb":
            return "⇥"
        case "rarrbfs":
            return "⤠"
        case "rarrc":
            return "⤳"
        case "rarrfs":
            return "⤞"
        case "rarrhk":
            return "↪"
        case "rarrlp":
            return "↬"
        case "rarrpl":
            return "⥅"
        case "rarrsim":
            return "⥴"
        case "Rarrtl":
            return "⤖"
        case "rarrtl":
            return "↣"
        case "rarrw":
            return "↝"
        case "rAtail":
            return "⤜"
        case "ratail":
            return "⤚"
        case "ratio":
            return "∶"
        case "rationals":
            return "ℚ"
        case "RBarr":
            return "⤐"
        case "rBarr":
            return "⤏"
        case "rbarr":
            return "⤍"
        case "rbbrk":
            return "❳"
        case "rbrace":
            return "}"
        case "rbrack":
            return "]"
        case "rbrke":
            return "⦌"
        case "rbrksld":
            return "⦎"
        case "rbrkslu":
            return "⦐"
        case "Rcaron":
            return "Ř"
        case "rcaron":
            return "ř"
        case "Rcedil":
            return "Ŗ"
        case "rcedil":
            return "ŗ"
        case "rceil":
            return "⌉"
        case "rcub":
            return "}"
        case "Rcy":
            return "Р"
        case "rcy":
            return "р"
        case "rdca":
            return "⤷"
        case "rdldhar":
            return "⥩"
        case "rdquo":
            return "”"
        case "rdquor":
            return "”"
        case "rdsh":
            return "↳"
        case "Re":
            return "ℜ"
        case "real":
            return "ℜ"
        case "realine":
            return "ℛ"
        case "realpart":
            return "ℜ"
        case "reals":
            return "ℝ"
        case "rect":
            return "▭"
        case "REG":
            return "®"
        case "reg":
            return "®"
        case "ReverseElement":
            return "∋"
        case "ReverseEquilibrium":
            return "⇋"
        case "ReverseUpEquilibrium":
            return "⥯"
        case "rfisht":
            return "⥽"
        case "rfloor":
            return "⌋"
        case "Rfr":
            return "ℜ"
        case "rfr":
            return "픯"
        case "rHar":
            return "⥤"
        case "rhard":
            return "⇁"
        case "rharu":
            return "⇀"
        case "rharul":
            return "⥬"
        case "Rho":
            return "Ρ"
        case "rho":
            return "ρ"
        case "rhov":
            return "ϱ"
        case "RightAngleBracket":
            return "〉"
        case "RightArrow":
            return "→"
        case "Rightarrow":
            return "⇒"
        case "rightarrow":
            return "→"
        case "RightArrowBar":
            return "⇥"
        case "RightArrowLeftArrow":
            return "⇄"
        case "rightarrowtail":
            return "↣"
        case "RightCeiling":
            return "⌉"
        case "RightDoubleBracket":
            return "⟧"
        case "RightDownTeeVector":
            return "⥝"
        case "RightDownVector":
            return "⇂"
        case "RightDownVectorBar":
            return "⥕"
        case "RightFloor":
            return "⌋"
        case "rightharpoondown":
            return "⇁"
        case "rightharpoonup":
            return "⇀"
        case "rightleftarrows":
            return "⇄"
        case "rightleftharpoons":
            return "⇌"
        case "rightrightarrows":
            return "⇉"
        case "rightsquigarrow":
            return "↝"
        case "RightTee":
            return "⊢"
        case "RightTeeArrow":
            return "↦"
        case "RightTeeVector":
            return "⥛"
        case "rightthreetimes":
            return "⋌"
        case "RightTriangle":
            return "⊳"
        case "RightTriangleBar":
            return "⧐"
        case "RightTriangleEqual":
            return "⊵"
        case "RightUpDownVector":
            return "⥏"
        case "RightUpTeeVector":
            return "⥜"
        case "RightUpVector":
            return "↾"
        case "RightUpVectorBar":
            return "⥔"
        case "RightVector":
            return "⇀"
        case "RightVectorBar":
            return "⥓"
        case "ring":
            return "˚"
        case "risingdotseq":
            return "≓"
        case "rlarr":
            return "⇄"
        case "rlhar":
            return "⇌"
        case "rlm":
            return "‏"
        case "rmoust":
            return "⎱"
        case "rmoustache":
            return "⎱"
        case "rnmid":
            return "⫮"
        case "roang":
            return "⟭"
        case "roarr":
            return "⇾"
        case "robrk":
            return "⟧"
        case "ropar":
            return "⦆"
        case "Ropf":
            return "ℝ"
        case "ropf":
            return "핣"
        case "roplus":
            return "⨮"
        case "rotimes":
            return "⨵"
        case "RoundImplies":
            return "⥰"
        case "rpar":
            return ")"
        case "rpargt":
            return "⦔"
        case "rppolint":
            return "⨒"
        case "rrarr":
            return "⇉"
        case "Rrightarrow":
            return "⇛"
        case "rsaquo":
            return "›"
        case "Rscr":
            return "ℛ"
        case "rscr":
            return "퓇"
        case "Rsh":
            return "↱"
        case "rsh":
            return "↱"
        case "rsqb":
            return "]"
        case "rsquo":
            return "’"
        case "rsquor":
            return "’"
        case "rthree":
            return "⋌"
        case "rtimes":
            return "⋊"
        case "rtri":
            return "▹"
        case "rtrie":
            return "⊵"
        case "rtrif":
            return "▸"
        case "rtriltri":
            return "⧎"
        case "RuleDelayed":
            return "⧴"
        case "ruluhar":
            return "⥨"
        case "rx":
            return "℞"
        case "Sacute":
            return "Ś"
        case "sacute":
            return "ś"
        case "sbquo":
            return "‚"
        case "Sc":
            return "⪼"
        case "sc":
            return "≻"
        case "scap":
            return "⪸"
        case "Scaron":
            return "Š"
        case "scaron":
            return "š"
        case "sccue":
            return "≽"
        case "scE":
            return "⪴"
        case "sce":
            return "⪰"
        case "Scedil":
            return "Ş"
        case "scedil":
            return "ş"
        case "Scirc":
            return "Ŝ"
        case "scirc":
            return "ŝ"
        case "scnap":
            return "⪺"
        case "scnE":
            return "⪶"
        case "scnsim":
            return "⋩"
        case "scpolint":
            return "⨓"
        case "scsim":
            return "≿"
        case "Scy":
            return "С"
        case "scy":
            return "с"
        case "sdot":
            return "⋅"
        case "sdotb":
            return "⊡"
        case "sdote":
            return "⩦"
        case "searhk":
            return "⤥"
        case "seArr":
            return "⇘"
        case "searr":
            return "↘"
        case "searrow":
            return "↘"
        case "sect":
            return "§"
        case "semi":
            return ";"
        case "seswar":
            return "⤩"
        case "setminus":
            return "∖"
        case "setmn":
            return "∖"
        case "sext":
            return "✶"
        case "Sfr":
            return "픖"
        case "sfr":
            return "픰"
        case "sfrown":
            return "⌢"
        case "sharp":
            return "♯"
        case "SHCHcy":
            return "Щ"
        case "shchcy":
            return "щ"
        case "SHcy":
            return "Ш"
        case "shcy":
            return "ш"
        case "ShortDownArrow":
            return "↓"
        case "ShortLeftArrow":
            return "←"
        case "shortmid":
            return "∣"
        case "shortparallel":
            return "∥"
        case "ShortRightArrow":
            return "→"
        case "ShortUpArrow":
            return "↑"
        case "shy":
            return "­"
        case "Sigma":
            return "Σ"
        case "sigma":
            return "σ"
        case "sigmaf":
            return "ς"
        case "sigmav":
            return "ς"
        case "sim":
            return "∼"
        case "simdot":
            return "⩪"
        case "sime":
            return "≃"
        case "simeq":
            return "≃"
        case "simg":
            return "⪞"
        case "simgE":
            return "⪠"
        case "siml":
            return "⪝"
        case "simlE":
            return "⪟"
        case "simne":
            return "≆"
        case "simplus":
            return "⨤"
        case "simrarr":
            return "⥲"
        case "slarr":
            return "←"
        case "SmallCircle":
            return "∘"
        case "smallsetminus":
            return "∖"
        case "smashp":
            return "⨳"
        case "smeparsl":
            return "⧤"
        case "smid":
            return "∣"
        case "smile":
            return "⌣"
        case "smt":
            return "⪪"
        case "smte":
            return "⪬"
        case "SOFTcy":
            return "Ь"
        case "softcy":
            return "ь"
        case "sol":
            return "/"
        case "solb":
            return "⧄"
        case "solbar":
            return "⌿"
        case "Sopf":
            return "핊"
        case "sopf":
            return "핤"
        case "spades":
            return "♠"
        case "spadesuit":
            return "♠"
        case "spar":
            return "∥"
        case "sqcap":
            return "⊓"
        case "sqcup":
            return "⊔"
        case "Sqrt":
            return "√"
        case "sqsub":
            return "⊏"
        case "sqsube":
            return "⊑"
        case "sqsubset":
            return "⊏"
        case "sqsubseteq":
            return "⊑"
        case "sqsup":
            return "⊐"
        case "sqsupe":
            return "⊒"
        case "sqsupset":
            return "⊐"
        case "sqsupseteq":
            return "⊒"
        case "squ":
            return "□"
        case "Square":
            return "□"
        case "square":
            return "□"
        case "SquareIntersection":
            return "⊓"
        case "SquareSubset":
            return "⊏"
        case "SquareSubsetEqual":
            return "⊑"
        case "SquareSuperset":
            return "⊐"
        case "SquareSupersetEqual":
            return "⊒"
        case "SquareUnion":
            return "⊔"
        case "squarf":
            return "▪"
        case "squf":
            return "▪"
        case "srarr":
            return "→"
        case "Sscr":
            return "풮"
        case "sscr":
            return "퓈"
        case "ssetmn":
            return "∖"
        case "ssmile":
            return "⌣"
        case "sstarf":
            return "⋆"
        case "Star":
            return "⋆"
        case "star":
            return "☆"
        case "starf":
            return "★"
        case "straightepsilon":
            return "ϵ"
        case "straightphi":
            return "ϕ"
        case "strns":
            return "¯"
        case "Sub":
            return "⋐"
        case "sub":
            return "⊂"
        case "subdot":
            return "⪽"
        case "subE":
            return "⫅"
        case "sube":
            return "⊆"
        case "subedot":
            return "⫃"
        case "submult":
            return "⫁"
        case "subnE":
            return "⫋"
        case "subne":
            return "⊊"
        case "subplus":
            return "⪿"
        case "subrarr":
            return "⥹"
        case "Subset":
            return "⋐"
        case "subset":
            return "⊂"
        case "subseteq":
            return "⊆"
        case "subseteqq":
            return "⫅"
        case "SubsetEqual":
            return "⊆"
        case "subsetneq":
            return "⊊"
        case "subsetneqq":
            return "⫋"
        case "subsim":
            return "⫇"
        case "subsub":
            return "⫕"
        case "subsup":
            return "⫓"
        case "succ":
            return "≻"
        case "succapprox":
            return "⪸"
        case "succcurlyeq":
            return "≽"
        case "Succeeds":
            return "≻"
        case "SucceedsEqual":
            return "⪰"
        case "SucceedsSlantEqual":
            return "≽"
        case "SucceedsTilde":
            return "≿"
        case "succeq":
            return "⪰"
        case "succnapprox":
            return "⪺"
        case "succneqq":
            return "⪶"
        case "succnsim":
            return "⋩"
        case "succsim":
            return "≿"
        case "SuchThat":
            return "∋"
        case "Sum":
            return "∑"
        case "sum":
            return "∑"
        case "sung":
            return "♪"
        case "Sup":
            return "⋑"
        case "sup":
            return "⊃"
        case "sup1":
            return "¹"
        case "sup2":
            return "²"
        case "sup3":
            return "³"
        case "supdot":
            return "⪾"
        case "supdsub":
            return "⫘"
        case "supE":
            return "⫆"
        case "supe":
            return "⊇"
        case "supedot":
            return "⫄"
        case "Superset":
            return "⊃"
        case "SupersetEqual":
            return "⊇"
        case "suphsol":
            return "⟉"
        case "suphsub":
            return "⫗"
        case "suplarr":
            return "⥻"
        case "supmult":
            return "⫂"
        case "supnE":
            return "⫌"
        case "supne":
            return "⊋"
        case "supplus":
            return "⫀"
        case "Supset":
            return "⋑"
        case "supset":
            return "⊃"
        case "supseteq":
            return "⊇"
        case "supseteqq":
            return "⫆"
        case "supsetneq":
            return "⊋"
        case "supsetneqq":
            return "⫌"
        case "supsim":
            return "⫈"
        case "supsub":
            return "⫔"
        case "supsup":
            return "⫖"
        case "swarhk":
            return "⤦"
        case "swArr":
            return "⇙"
        case "swarr":
            return "↙"
        case "swarrow":
            return "↙"
        case "swnwar":
            return "⤪"
        case "szlig":
            return "ß"
        case "target":
            return "⌖"
        case "Tau":
            return "Τ"
        case "tau":
            return "τ"
        case "tbrk":
            return "⎴"
        case "Tcaron":
            return "Ť"
        case "tcaron":
            return "ť"
        case "Tcedil":
            return "Ţ"
        case "tcedil":
            return "ţ"
        case "Tcy":
            return "Т"
        case "tcy":
            return "т"
        case "telrec":
            return "⌕"
        case "Tfr":
            return "픗"
        case "tfr":
            return "픱"
        case "there4":
            return "∴"
        case "Therefore":
            return "∴"
        case "therefore":
            return "∴"
        case "Theta":
            return "Θ"
        case "theta":
            return "θ"
        case "thetasym":
            return "ϑ"
        case "thetav":
            return "ϑ"
        case "thickapprox":
            return "≈"
        case "thicksim":
            return "∼"
        case "thinsp":
            return " "
        case "ThinSpace":
            return " "
        case "thkap":
            return "≈"
        case "thksim":
            return "∼"
        case "THORN":
            return "Þ"
        case "thorn":
            return "þ"
        case "Tilde":
            return "∼"
        case "tilde":
            return "˜"
        case "TildeEqual":
            return "≃"
        case "TildeFullEqual":
            return "≅"
        case "TildeTilde":
            return "≈"
        case "times":
            return "×"
        case "timesb":
            return "⊠"
        case "timesbar":
            return "⨱"
        case "timesd":
            return "⨰"
        case "tint":
            return "∭"
        case "toea":
            return "⤨"
        case "top":
            return "⊤"
        case "topbot":
            return "⌶"
        case "topcir":
            return "⫱"
        case "Topf":
            return "핋"
        case "topf":
            return "핥"
        case "topfork":
            return "⫚"
        case "tosa":
            return "⤩"
        case "tprime":
            return "‴"
        case "TRADE":
            return "™"
        case "trade":
            return "™"
        case "triangle":
            return "▵"
        case "triangledown":
            return "▿"
        case "triangleleft":
            return "◃"
        case "trianglelefteq":
            return "⊴"
        case "triangleq":
            return "≜"
        case "triangleright":
            return "▹"
        case "trianglerighteq":
            return "⊵"
        case "tridot":
            return "◬"
        case "trie":
            return "≜"
        case "triminus":
            return "⨺"
        case "triplus":
            return "⨹"
        case "trisb":
            return "⧍"
        case "tritime":
            return "⨻"
        case "trpezium":
            return "⏢"
        case "Tscr":
            return "풯"
        case "tscr":
            return "퓉"
        case "TScy":
            return "Ц"
        case "tscy":
            return "ц"
        case "TSHcy":
            return "Ћ"
        case "tshcy":
            return "ћ"
        case "Tstrok":
            return "Ŧ"
        case "tstrok":
            return "ŧ"
        case "twixt":
            return "≬"
        case "twoheadleftarrow":
            return "↞"
        case "twoheadrightarrow":
            return "↠"
        case "Uacute":
            return "Ú"
        case "uacute":
            return "ú"
        case "Uarr":
            return "↟"
        case "uArr":
            return "⇑"
        case "uarr":
            return "↑"
        case "Uarrocir":
            return "⥉"
        case "Ubrcy":
            return "Ў"
        case "ubrcy":
            return "ў"
        case "Ubreve":
            return "Ŭ"
        case "ubreve":
            return "ŭ"
        case "Ucirc":
            return "Û"
        case "ucirc":
            return "û"
        case "Ucy":
            return "У"
        case "ucy":
            return "у"
        case "udarr":
            return "⇅"
        case "Udblac":
            return "Ű"
        case "udblac":
            return "ű"
        case "udhar":
            return "⥮"
        case "ufisht":
            return "⥾"
        case "Ufr":
            return "픘"
        case "ufr":
            return "픲"
        case "Ugrave":
            return "Ù"
        case "ugrave":
            return "ù"
        case "uHar":
            return "⥣"
        case "uharl":
            return "↿"
        case "uharr":
            return "↾"
        case "uhblk":
            return "▀"
        case "ulcorn":
            return "⌜"
        case "ulcorner":
            return "⌜"
        case "ulcrop":
            return "⌏"
        case "ultri":
            return "◸"
        case "Umacr":
            return "Ū"
        case "umacr":
            return "ū"
        case "uml":
            return "¨"
        case "UnderBar":
            return "_"
        case "UnderBrace":
            return "⏟"
        case "UnderBracket":
            return "⎵"
        case "UnderParenthesis":
            return "⏝"
        case "Union":
            return "⋃"
        case "UnionPlus":
            return "⊎"
        case "Uogon":
            return "Ų"
        case "uogon":
            return "ų"
        case "Uopf":
            return "핌"
        case "uopf":
            return "핦"
        case "UpArrow":
            return "↑"
        case "Uparrow":
            return "⇑"
        case "uparrow":
            return "↑"
        case "UpArrowBar":
            return "⤒"
        case "UpArrowDownArrow":
            return "⇅"
        case "UpDownArrow":
            return "↕"
        case "Updownarrow":
            return "⇕"
        case "updownarrow":
            return "↕"
        case "UpEquilibrium":
            return "⥮"
        case "upharpoonleft":
            return "↿"
        case "upharpoonright":
            return "↾"
        case "uplus":
            return "⊎"
        case "UpperLeftArrow":
            return "↖"
        case "UpperRightArrow":
            return "↗"
        case "Upsi":
            return "ϒ"
        case "upsi":
            return "υ"
        case "upsih":
            return "ϒ"
        case "Upsilon":
            return "Υ"
        case "upsilon":
            return "υ"
        case "UpTee":
            return "⊥"
        case "UpTeeArrow":
            return "↥"
        case "upuparrows":
            return "⇈"
        case "urcorn":
            return "⌝"
        case "urcorner":
            return "⌝"
        case "urcrop":
            return "⌎"
        case "Uring":
            return "Ů"
        case "uring":
            return "ů"
        case "urtri":
            return "◹"
        case "Uscr":
            return "풰"
        case "uscr":
            return "퓊"
        case "utdot":
            return "⋰"
        case "Utilde":
            return "Ũ"
        case "utilde":
            return "ũ"
        case "utri":
            return "▵"
        case "utrif":
            return "▴"
        case "uuarr":
            return "⇈"
        case "Uuml":
            return "Ü"
        case "uuml":
            return "ü"
        case "uwangle":
            return "⦧"
        case "vangrt":
            return "⦜"
        case "varepsilon":
            return "ϵ"
        case "varkappa":
            return "ϰ"
        case "varnothing":
            return "∅"
        case "varphi":
            return "ϕ"
        case "varpi":
            return "ϖ"
        case "varpropto":
            return "∝"
        case "vArr":
            return "⇕"
        case "varr":
            return "↕"
        case "varrho":
            return "ϱ"
        case "varsigma":
            return "ς"
        case "vartheta":
            return "ϑ"
        case "vartriangleleft":
            return "⊲"
        case "vartriangleright":
            return "⊳"
        case "Vbar":
            return "⫫"
        case "vBar":
            return "⫨"
        case "vBarv":
            return "⫩"
        case "Vcy":
            return "В"
        case "vcy":
            return "в"
        case "VDash":
            return "⊫"
        case "Vdash":
            return "⊩"
        case "vDash":
            return "⊨"
        case "vdash":
            return "⊢"
        case "Vdashl":
            return "⫦"
        case "Vee":
            return "⋁"
        case "vee":
            return "∨"
        case "veebar":
            return "⊻"
        case "veeeq":
            return "≚"
        case "vellip":
            return "⋮"
        case "Verbar":
            return "‖"
        case "verbar":
            return "|"
        case "Vert":
            return "‖"
        case "vert":
            return "|"
        case "VerticalBar":
            return "∣"
        case "VerticalLine":
            return "|"
        case "VerticalSeparator":
            return "❘"
        case "VerticalTilde":
            return "≀"
        case "VeryThinSpace":
            return " "
        case "Vfr":
            return "픙"
        case "vfr":
            return "픳"
        case "vltri":
            return "⊲"
        case "Vopf":
            return "핍"
        case "vopf":
            return "핧"
        case "vprop":
            return "∝"
        case "vrtri":
            return "⊳"
        case "Vscr":
            return "풱"
        case "vscr":
            return "퓋"
        case "Vvdash":
            return "⊪"
        case "vzigzag":
            return "⦚"
        case "Wcirc":
            return "Ŵ"
        case "wcirc":
            return "ŵ"
        case "wedbar":
            return "⩟"
        case "Wedge":
            return "⋀"
        case "wedge":
            return "∧"
        case "wedgeq":
            return "≙"
        case "weierp":
            return "℘"
        case "Wfr":
            return "픚"
        case "wfr":
            return "픴"
        case "Wopf":
            return "핎"
        case "wopf":
            return "함"
        case "wp":
            return "℘"
        case "wr":
            return "≀"
        case "wreath":
            return "≀"
        case "Wscr":
            return "풲"
        case "wscr":
            return "퓌"
        case "xcap":
            return "⋂"
        case "xcirc":
            return "◯"
        case "xcup":
            return "⋃"
        case "xdtri":
            return "▽"
        case "Xfr":
            return "픛"
        case "xfr":
            return "픵"
        case "xhArr":
            return "⟺"
        case "xharr":
            return "⟷"
        case "Xi":
            return "Ξ"
        case "xi":
            return "ξ"
        case "xlArr":
            return "⟸"
        case "xlarr":
            return "⟵"
        case "xmap":
            return "⟼"
        case "xnis":
            return "⋻"
        case "xodot":
            return "⨀"
        case "Xopf":
            return "핏"
        case "xopf":
            return "합"
        case "xoplus":
            return "⨁"
        case "xotime":
            return "⨂"
        case "xrArr":
            return "⟹"
        case "xrarr":
            return "⟶"
        case "Xscr":
            return "풳"
        case "xscr":
            return "퓍"
        case "xsqcup":
            return "⨆"
        case "xuplus":
            return "⨄"
        case "xutri":
            return "△"
        case "xvee":
            return "⋁"
        case "xwedge":
            return "⋀"
        case "Yacute":
            return "Ý"
        case "yacute":
            return "ý"
        case "YAcy":
            return "Я"
        case "yacy":
            return "я"
        case "Ycirc":
            return "Ŷ"
        case "ycirc":
            return "ŷ"
        case "Ycy":
            return "Ы"
        case "ycy":
            return "ы"
        case "yen":
            return "¥"
        case "Yfr":
            return "픜"
        case "yfr":
            return "픶"
        case "YIcy":
            return "Ї"
        case "yicy":
            return "ї"
        case "Yopf":
            return "핐"
        case "yopf":
            return "핪"
        case "Yscr":
            return "풴"
        case "yscr":
            return "퓎"
        case "YUcy":
            return "Ю"
        case "yucy":
            return "ю"
        case "Yuml":
            return "Ÿ"
        case "yuml":
            return "ÿ"
        case "Zacute":
            return "Ź"
        case "zacute":
            return "ź"
        case "Zcaron":
            return "Ž"
        case "zcaron":
            return "ž"
        case "Zcy":
            return "З"
        case "zcy":
            return "з"
        case "Zdot":
            return "Ż"
        case "zdot":
            return "ż"
        case "zeetrf":
            return "ℨ"
        case "ZeroWidthSpace":
            return "​"
        case "Zeta":
            return "Ζ"
        case "zeta":
            return "ζ"
        case "Zfr":
            return "ℨ"
        case "zfr":
            return "픷"
        case "ZHcy":
            return "Ж"
        case "zhcy":
            return "ж"
        case "zigrarr":
            return "⇝"
        case "Zopf":
            return "ℤ"
        case "zopf":
            return "핫"
        case "Zscr":
            return "풵"
        case "zscr":
            return "퓏"
        case "zwj":
            return "‍"
        case "zwnj":
            return "‌"
        default:
            return "?"
        }
    }
}

// TODO: Support glyph compound named characters
